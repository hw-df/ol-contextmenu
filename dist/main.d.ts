import type { Pixel } from 'ol/pixel';
import { Coordinate } from 'ol/coordinate';
import OlMap from 'ol/Map';
import Control from 'ol/control/Control';
import { Item, MenuEntry, Options } from './types';
export default class ContextMenu extends Control {
    protected map: OlMap;
    protected container: HTMLDivElement;
    protected coordinate: Coordinate;
    protected pixel: Pixel;
    protected contextMenuEventListener: (evt: MouseEvent) => void;
    protected entryCallbackEventListener: (evt: MouseEvent) => void;
    protected mapMoveListener: () => void;
    protected beforeOpenHandler: (coordinate: Coordinate, pixel: Pixel) => void;
    protected closeHandler: () => void;
    protected lineHeight: number;
    protected disabled: boolean;
    protected opened: boolean;
    protected items: Item[];
    protected menuEntries: Map<string, MenuEntry>;
    options: Options;
    constructor(opts?: Partial<Options>);
    clear(): void;
    enable(): void;
    disable(): void;
    getDefaultItems(): import("./types").SingleItem[];
    countItems(): number;
    extend(items: Item[]): void;
    closeMenu(): void;
    isOpen(): boolean;
    updatePosition(pixel: Pixel): void;
    pop(): void;
    shift(): void;
    push(item: Item): void;
    setMap(map: OlMap): void;
    protected removeListeners(): void;
    protected removeMenuEntry(id: string): void;
    protected handleContextMenu(evt: MouseEvent): void;
    protected openMenu(): void;
    protected getMenuEntriesLength(): number;
    protected positionContainer(): void;
    protected handleMapMove(): void;
    protected handleEntryCallback(evt: MouseEvent): void;
    protected handleAddMenuEntry(item: MenuEntry, element: HTMLLIElement): void;
}
